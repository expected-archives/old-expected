// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller.proto

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	controller.proto
	image.proto

It has these top-level messages:
	ChangeContainerStateRequest
	ChangeContainerStateReply
	GetContainersLogsRequest
	GetContainersLogsReply
	DeleteImageRequest
	DeleteImageReply
	GenerateTokenRequest
	GenerateTokenReply
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type State int32

const (
	State_START State = 0
	State_STOP  State = 1
)

var State_name = map[int32]string{
	0: "START",
	1: "STOP",
}
var State_value = map[string]int32{
	"START": 0,
	"STOP":  1,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ChangeContainerStateRequest struct {
	Id             string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RequestedState State  `protobuf:"varint,2,opt,name=requestedState,enum=protocol.State" json:"requestedState,omitempty"`
}

func (m *ChangeContainerStateRequest) Reset()                    { *m = ChangeContainerStateRequest{} }
func (m *ChangeContainerStateRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangeContainerStateRequest) ProtoMessage()               {}
func (*ChangeContainerStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChangeContainerStateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChangeContainerStateRequest) GetRequestedState() State {
	if m != nil {
		return m.RequestedState
	}
	return State_START
}

type ChangeContainerStateReply struct {
}

func (m *ChangeContainerStateReply) Reset()                    { *m = ChangeContainerStateReply{} }
func (m *ChangeContainerStateReply) String() string            { return proto.CompactTextString(m) }
func (*ChangeContainerStateReply) ProtoMessage()               {}
func (*ChangeContainerStateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetContainersLogsRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetContainersLogsRequest) Reset()                    { *m = GetContainersLogsRequest{} }
func (m *GetContainersLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetContainersLogsRequest) ProtoMessage()               {}
func (*GetContainersLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetContainersLogsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetContainersLogsReply struct {
	Line string `protobuf:"bytes,1,opt,name=line" json:"line,omitempty"`
}

func (m *GetContainersLogsReply) Reset()                    { *m = GetContainersLogsReply{} }
func (m *GetContainersLogsReply) String() string            { return proto.CompactTextString(m) }
func (*GetContainersLogsReply) ProtoMessage()               {}
func (*GetContainersLogsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetContainersLogsReply) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func init() {
	proto.RegisterType((*ChangeContainerStateRequest)(nil), "protocol.ChangeContainerStateRequest")
	proto.RegisterType((*ChangeContainerStateReply)(nil), "protocol.ChangeContainerStateReply")
	proto.RegisterType((*GetContainersLogsRequest)(nil), "protocol.GetContainersLogsRequest")
	proto.RegisterType((*GetContainersLogsReply)(nil), "protocol.GetContainersLogsReply")
	proto.RegisterEnum("protocol.State", State_name, State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	ChangeContainerState(ctx context.Context, in *ChangeContainerStateRequest, opts ...grpc.CallOption) (*ChangeContainerStateReply, error)
	GetContainerLogs(ctx context.Context, in *GetContainersLogsRequest, opts ...grpc.CallOption) (Controller_GetContainerLogsClient, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) ChangeContainerState(ctx context.Context, in *ChangeContainerStateRequest, opts ...grpc.CallOption) (*ChangeContainerStateReply, error) {
	out := new(ChangeContainerStateReply)
	err := grpc.Invoke(ctx, "/protocol.Controller/ChangeContainerState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetContainerLogs(ctx context.Context, in *GetContainersLogsRequest, opts ...grpc.CallOption) (Controller_GetContainerLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Controller_serviceDesc.Streams[0], c.cc, "/protocol.Controller/GetContainerLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerGetContainerLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_GetContainerLogsClient interface {
	Recv() (*GetContainersLogsReply, error)
	grpc.ClientStream
}

type controllerGetContainerLogsClient struct {
	grpc.ClientStream
}

func (x *controllerGetContainerLogsClient) Recv() (*GetContainersLogsReply, error) {
	m := new(GetContainersLogsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Controller service

type ControllerServer interface {
	ChangeContainerState(context.Context, *ChangeContainerStateRequest) (*ChangeContainerStateReply, error)
	GetContainerLogs(*GetContainersLogsRequest, Controller_GetContainerLogsServer) error
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_ChangeContainerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeContainerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ChangeContainerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Controller/ChangeContainerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ChangeContainerState(ctx, req.(*ChangeContainerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetContainersLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).GetContainerLogs(m, &controllerGetContainerLogsServer{stream})
}

type Controller_GetContainerLogsServer interface {
	Send(*GetContainersLogsReply) error
	grpc.ServerStream
}

type controllerGetContainerLogsServer struct {
	grpc.ServerStream
}

func (x *controllerGetContainerLogsServer) Send(m *GetContainersLogsReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeContainerState",
			Handler:    _Controller_ChangeContainerState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetContainerLogs",
			Handler:       _Controller_GetContainerLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xce, 0xcf, 0x2b,
	0x29, 0xca, 0xcf, 0xc9, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53,
	0xc9, 0xf9, 0x39, 0x4a, 0x69, 0x5c, 0xd2, 0xce, 0x19, 0x89, 0x79, 0xe9, 0xa9, 0xce, 0xf9, 0x79,
	0x25, 0x89, 0x99, 0x79, 0xa9, 0x45, 0xc1, 0x25, 0x89, 0x25, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9,
	0xc5, 0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x4c,
	0x99, 0x29, 0x42, 0xe6, 0x5c, 0x7c, 0x45, 0x10, 0xa9, 0xd4, 0x14, 0xb0, 0x42, 0x09, 0x26, 0x05,
	0x46, 0x0d, 0x3e, 0x23, 0x7e, 0x3d, 0x98, 0x89, 0x7a, 0x10, 0xfd, 0x68, 0xca, 0x94, 0xa4, 0xb9,
	0x24, 0xb1, 0xdb, 0x53, 0x90, 0x53, 0xa9, 0xa4, 0xc5, 0x25, 0xe1, 0x9e, 0x5a, 0x02, 0x97, 0x29,
	0xf6, 0xc9, 0x4f, 0x2f, 0xc6, 0xe1, 0x02, 0x25, 0x1d, 0x2e, 0x31, 0x2c, 0x6a, 0x0b, 0x72, 0x2a,
	0x85, 0x84, 0xb8, 0x58, 0x72, 0x32, 0xf3, 0x52, 0xa1, 0x6a, 0xc1, 0x6c, 0x2d, 0x19, 0x2e, 0x56,
	0xb0, 0x3d, 0x42, 0x9c, 0x5c, 0xac, 0xc1, 0x21, 0x8e, 0x41, 0x21, 0x02, 0x0c, 0x42, 0x1c, 0x5c,
	0x2c, 0xc1, 0x21, 0xfe, 0x01, 0x02, 0x8c, 0x46, 0x17, 0x18, 0xb9, 0xb8, 0x9c, 0xe1, 0x61, 0x23,
	0x94, 0xc2, 0x25, 0x82, 0xcd, 0x8d, 0x42, 0xaa, 0x08, 0xcf, 0xe1, 0x09, 0x2b, 0x29, 0x65, 0x42,
	0xca, 0x40, 0x5e, 0x65, 0x10, 0x8a, 0xe1, 0x12, 0x40, 0xf6, 0x00, 0xc8, 0xfd, 0x42, 0x4a, 0x08,
	0xad, 0xb8, 0x02, 0x42, 0x4a, 0x01, 0xaf, 0x1a, 0xb0, 0xd9, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x45,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x3d, 0x41, 0x5c, 0xf4, 0x01, 0x00, 0x00,
}
