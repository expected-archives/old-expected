// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller.proto

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	controller.proto
	image.proto
	util.proto
	auth.proto

It has these top-level messages:
	ChangeContainerStateRequest
	ChangeContainerStateReply
	GetContainerLogsRequest
	GetContainerLogsReply
	GetContainerMetricsRequest
	GetContainerMetricsReply
	DeleteImageEvent
	DeleteImageLayerEvent
	Timestamp
	GenerateTokenRequest
	GenerateTokenReply
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChangeContainerStateRequest_State int32

const (
	ChangeContainerStateRequest_START ChangeContainerStateRequest_State = 0
	ChangeContainerStateRequest_STOP  ChangeContainerStateRequest_State = 1
)

var ChangeContainerStateRequest_State_name = map[int32]string{
	0: "START",
	1: "STOP",
}
var ChangeContainerStateRequest_State_value = map[string]int32{
	"START": 0,
	"STOP":  1,
}

func (x ChangeContainerStateRequest_State) String() string {
	return proto.EnumName(ChangeContainerStateRequest_State_name, int32(x))
}
func (ChangeContainerStateRequest_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type GetContainerLogsReply_Output int32

const (
	GetContainerLogsReply_STDOUT GetContainerLogsReply_Output = 0
	GetContainerLogsReply_STDERR GetContainerLogsReply_Output = 1
)

var GetContainerLogsReply_Output_name = map[int32]string{
	0: "STDOUT",
	1: "STDERR",
}
var GetContainerLogsReply_Output_value = map[string]int32{
	"STDOUT": 0,
	"STDERR": 1,
}

func (x GetContainerLogsReply_Output) String() string {
	return proto.EnumName(GetContainerLogsReply_Output_name, int32(x))
}
func (GetContainerLogsReply_Output) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

type ChangeContainerStateRequest struct {
	Id             string                            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RequestedState ChangeContainerStateRequest_State `protobuf:"varint,2,opt,name=requestedState,enum=protocol.ChangeContainerStateRequest_State" json:"requestedState,omitempty"`
}

func (m *ChangeContainerStateRequest) Reset()                    { *m = ChangeContainerStateRequest{} }
func (m *ChangeContainerStateRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangeContainerStateRequest) ProtoMessage()               {}
func (*ChangeContainerStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChangeContainerStateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChangeContainerStateRequest) GetRequestedState() ChangeContainerStateRequest_State {
	if m != nil {
		return m.RequestedState
	}
	return ChangeContainerStateRequest_START
}

type ChangeContainerStateReply struct {
}

func (m *ChangeContainerStateReply) Reset()                    { *m = ChangeContainerStateReply{} }
func (m *ChangeContainerStateReply) String() string            { return proto.CompactTextString(m) }
func (*ChangeContainerStateReply) ProtoMessage()               {}
func (*ChangeContainerStateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetContainerLogsRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetContainerLogsRequest) Reset()                    { *m = GetContainerLogsRequest{} }
func (m *GetContainerLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetContainerLogsRequest) ProtoMessage()               {}
func (*GetContainerLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetContainerLogsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetContainerLogsReply struct {
	Output  GetContainerLogsReply_Output `protobuf:"varint,1,opt,name=output,enum=protocol.GetContainerLogsReply_Output" json:"output,omitempty"`
	Time    *Timestamp                   `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	TaskId  string                       `protobuf:"bytes,3,opt,name=taskId" json:"taskId,omitempty"`
	Message string                       `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *GetContainerLogsReply) Reset()                    { *m = GetContainerLogsReply{} }
func (m *GetContainerLogsReply) String() string            { return proto.CompactTextString(m) }
func (*GetContainerLogsReply) ProtoMessage()               {}
func (*GetContainerLogsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetContainerLogsReply) GetOutput() GetContainerLogsReply_Output {
	if m != nil {
		return m.Output
	}
	return GetContainerLogsReply_STDOUT
}

func (m *GetContainerLogsReply) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *GetContainerLogsReply) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *GetContainerLogsReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetContainerMetricsRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetContainerMetricsRequest) Reset()                    { *m = GetContainerMetricsRequest{} }
func (m *GetContainerMetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetContainerMetricsRequest) ProtoMessage()               {}
func (*GetContainerMetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetContainerMetricsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetContainerMetricsReply struct {
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *GetContainerMetricsReply) Reset()                    { *m = GetContainerMetricsReply{} }
func (m *GetContainerMetricsReply) String() string            { return proto.CompactTextString(m) }
func (*GetContainerMetricsReply) ProtoMessage()               {}
func (*GetContainerMetricsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetContainerMetricsReply) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*ChangeContainerStateRequest)(nil), "protocol.ChangeContainerStateRequest")
	proto.RegisterType((*ChangeContainerStateReply)(nil), "protocol.ChangeContainerStateReply")
	proto.RegisterType((*GetContainerLogsRequest)(nil), "protocol.GetContainerLogsRequest")
	proto.RegisterType((*GetContainerLogsReply)(nil), "protocol.GetContainerLogsReply")
	proto.RegisterType((*GetContainerMetricsRequest)(nil), "protocol.GetContainerMetricsRequest")
	proto.RegisterType((*GetContainerMetricsReply)(nil), "protocol.GetContainerMetricsReply")
	proto.RegisterEnum("protocol.ChangeContainerStateRequest_State", ChangeContainerStateRequest_State_name, ChangeContainerStateRequest_State_value)
	proto.RegisterEnum("protocol.GetContainerLogsReply_Output", GetContainerLogsReply_Output_name, GetContainerLogsReply_Output_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	ChangeContainerState(ctx context.Context, in *ChangeContainerStateRequest, opts ...grpc.CallOption) (*ChangeContainerStateReply, error)
	GetContainerLogs(ctx context.Context, in *GetContainerLogsRequest, opts ...grpc.CallOption) (Controller_GetContainerLogsClient, error)
	GetContainerMetrics(ctx context.Context, in *GetContainerMetricsRequest, opts ...grpc.CallOption) (Controller_GetContainerMetricsClient, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) ChangeContainerState(ctx context.Context, in *ChangeContainerStateRequest, opts ...grpc.CallOption) (*ChangeContainerStateReply, error) {
	out := new(ChangeContainerStateReply)
	err := grpc.Invoke(ctx, "/protocol.Controller/ChangeContainerState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetContainerLogs(ctx context.Context, in *GetContainerLogsRequest, opts ...grpc.CallOption) (Controller_GetContainerLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Controller_serviceDesc.Streams[0], c.cc, "/protocol.Controller/GetContainerLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerGetContainerLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_GetContainerLogsClient interface {
	Recv() (*GetContainerLogsReply, error)
	grpc.ClientStream
}

type controllerGetContainerLogsClient struct {
	grpc.ClientStream
}

func (x *controllerGetContainerLogsClient) Recv() (*GetContainerLogsReply, error) {
	m := new(GetContainerLogsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) GetContainerMetrics(ctx context.Context, in *GetContainerMetricsRequest, opts ...grpc.CallOption) (Controller_GetContainerMetricsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Controller_serviceDesc.Streams[1], c.cc, "/protocol.Controller/GetContainerMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerGetContainerMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_GetContainerMetricsClient interface {
	Recv() (*GetContainerMetricsReply, error)
	grpc.ClientStream
}

type controllerGetContainerMetricsClient struct {
	grpc.ClientStream
}

func (x *controllerGetContainerMetricsClient) Recv() (*GetContainerMetricsReply, error) {
	m := new(GetContainerMetricsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Controller service

type ControllerServer interface {
	ChangeContainerState(context.Context, *ChangeContainerStateRequest) (*ChangeContainerStateReply, error)
	GetContainerLogs(*GetContainerLogsRequest, Controller_GetContainerLogsServer) error
	GetContainerMetrics(*GetContainerMetricsRequest, Controller_GetContainerMetricsServer) error
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_ChangeContainerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeContainerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ChangeContainerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Controller/ChangeContainerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ChangeContainerState(ctx, req.(*ChangeContainerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetContainerLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).GetContainerLogs(m, &controllerGetContainerLogsServer{stream})
}

type Controller_GetContainerLogsServer interface {
	Send(*GetContainerLogsReply) error
	grpc.ServerStream
}

type controllerGetContainerLogsServer struct {
	grpc.ServerStream
}

func (x *controllerGetContainerLogsServer) Send(m *GetContainerLogsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_GetContainerMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetContainerMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).GetContainerMetrics(m, &controllerGetContainerMetricsServer{stream})
}

type Controller_GetContainerMetricsServer interface {
	Send(*GetContainerMetricsReply) error
	grpc.ServerStream
}

type controllerGetContainerMetricsServer struct {
	grpc.ServerStream
}

func (x *controllerGetContainerMetricsServer) Send(m *GetContainerMetricsReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeContainerState",
			Handler:    _Controller_ChangeContainerState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetContainerLogs",
			Handler:       _Controller_GetContainerLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetContainerMetrics",
			Handler:       _Controller_GetContainerMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xdb, 0x6e, 0x9b, 0x40,
	0x10, 0xf5, 0x52, 0x9b, 0xda, 0xd3, 0x0a, 0xa1, 0x71, 0x2f, 0x14, 0x57, 0xaa, 0xbb, 0xbd, 0xb9,
	0x6a, 0x85, 0x2a, 0xda, 0xe7, 0x4a, 0x95, 0x1b, 0x45, 0x91, 0x12, 0x39, 0x02, 0xf2, 0x92, 0x37,
	0x02, 0x2b, 0x07, 0x05, 0x58, 0x02, 0xcb, 0x83, 0xff, 0x26, 0xff, 0x90, 0x5f, 0xc9, 0x07, 0x45,
	0x2c, 0xbe, 0xc5, 0xc1, 0x76, 0x9e, 0xd8, 0x61, 0xce, 0x39, 0x7b, 0xf6, 0xcc, 0x80, 0x1e, 0xf0,
	0x54, 0xe4, 0x3c, 0x8e, 0x59, 0x6e, 0x65, 0x39, 0x17, 0x1c, 0xbb, 0xf2, 0x13, 0xf0, 0xd8, 0x84,
	0x52, 0x44, 0x71, 0xfd, 0x97, 0xde, 0x10, 0x18, 0x8c, 0x2f, 0xfd, 0x74, 0xca, 0xc6, 0x3c, 0x15,
	0x7e, 0x94, 0xb2, 0xdc, 0x15, 0xbe, 0x60, 0x0e, 0xbb, 0x2e, 0x59, 0x21, 0x50, 0x03, 0x25, 0x0a,
	0x0d, 0x32, 0x24, 0xa3, 0x9e, 0xa3, 0x44, 0x21, 0xba, 0xa0, 0xe5, 0x75, 0x8b, 0x85, 0x12, 0x68,
	0x28, 0x43, 0x32, 0xd2, 0xec, 0x1f, 0xd6, 0x42, 0xde, 0xda, 0x21, 0x67, 0xd5, 0xc5, 0x86, 0x04,
	0x7d, 0x0f, 0x1d, 0x79, 0xc0, 0x1e, 0x74, 0x5c, 0xef, 0x9f, 0xe3, 0xe9, 0x2d, 0xec, 0x42, 0xdb,
	0xf5, 0x26, 0xa7, 0x3a, 0xa1, 0x03, 0x78, 0xd7, 0x2c, 0x99, 0xc5, 0x33, 0xfa, 0x1d, 0xde, 0x1e,
	0x32, 0xb1, 0xec, 0x1c, 0xf3, 0x69, 0xb1, 0xc5, 0x3a, 0xbd, 0x23, 0xf0, 0xfa, 0x31, 0x36, 0x8b,
	0x67, 0xf8, 0x17, 0x54, 0x5e, 0x8a, 0xac, 0x14, 0x12, 0xad, 0xd9, 0x5f, 0x57, 0x8f, 0x69, 0x24,
	0x58, 0x13, 0x89, 0x76, 0xe6, 0x2c, 0xfc, 0x06, 0x6d, 0x11, 0x25, 0x75, 0x14, 0x2f, 0xec, 0xfe,
	0x8a, 0xed, 0x45, 0x09, 0x2b, 0x84, 0x9f, 0x64, 0x8e, 0x04, 0xe0, 0x1b, 0x50, 0x85, 0x5f, 0x5c,
	0x1d, 0x85, 0xc6, 0x33, 0x69, 0x6b, 0x5e, 0xa1, 0x01, 0xcf, 0x13, 0x56, 0x14, 0xfe, 0x94, 0x19,
	0x6d, 0xd9, 0x58, 0x94, 0x74, 0x08, 0x6a, 0x7d, 0x19, 0x02, 0xa8, 0xae, 0xf7, 0x7f, 0x72, 0x56,
	0x85, 0x53, 0x9f, 0x0f, 0x1c, 0x47, 0x27, 0xf4, 0x27, 0x98, 0xeb, 0x26, 0x4f, 0x98, 0xc8, 0xa3,
	0x60, 0x6b, 0x08, 0x7f, 0xc0, 0x68, 0x44, 0x57, 0x31, 0xac, 0xb9, 0xa8, 0x08, 0x2f, 0x97, 0x2e,
	0xec, 0x5b, 0x05, 0x60, 0xbc, 0x5c, 0x28, 0x0c, 0xe1, 0x55, 0xd3, 0x44, 0xf0, 0xcb, 0x93, 0x96,
	0xc0, 0xfc, 0xb4, 0x0f, 0x56, 0x0d, 0xb6, 0x85, 0xe7, 0xa0, 0x6f, 0xa6, 0x8f, 0x1f, 0x77, 0x4d,
	0xa6, 0x56, 0xff, 0xb0, 0x67, 0x78, 0xb4, 0xf5, 0x8b, 0x60, 0x00, 0xfd, 0x86, 0x18, 0xf0, 0x73,
	0x33, 0xf7, 0x61, 0xa6, 0x26, 0xdd, 0x83, 0x9a, 0x5f, 0x72, 0xa1, 0x4a, 0xd8, 0xef, 0xfb, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x2f, 0xa8, 0x37, 0x72, 0x8c, 0x03, 0x00, 0x00,
}
