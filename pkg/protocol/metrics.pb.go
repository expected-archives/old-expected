// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MetricsRequest struct {
}

func (m *MetricsRequest) Reset()                    { *m = MetricsRequest{} }
func (m *MetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*MetricsRequest) ProtoMessage()               {}
func (*MetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type MetricsResponse struct {
	Metrics [][]byte `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (m *MetricsResponse) Reset()                    { *m = MetricsResponse{} }
func (m *MetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*MetricsResponse) ProtoMessage()               {}
func (*MetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *MetricsResponse) GetMetrics() [][]byte {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricsRequest)(nil), "protocol.MetricsRequest")
	proto.RegisterType((*MetricsResponse)(nil), "protocol.MetricsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Metrics service

type MetricsClient interface {
	GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (Metrics_GetMetricsClient, error)
}

type metricsClient struct {
	cc *grpc.ClientConn
}

func NewMetricsClient(cc *grpc.ClientConn) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) GetMetrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (Metrics_GetMetricsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Metrics_serviceDesc.Streams[0], c.cc, "/protocol.Metrics/GetMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsGetMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metrics_GetMetricsClient interface {
	Recv() (*MetricsResponse, error)
	grpc.ClientStream
}

type metricsGetMetricsClient struct {
	grpc.ClientStream
}

func (x *metricsGetMetricsClient) Recv() (*MetricsResponse, error) {
	m := new(MetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Metrics service

type MetricsServer interface {
	GetMetrics(*MetricsRequest, Metrics_GetMetricsServer) error
}

func RegisterMetricsServer(s *grpc.Server, srv MetricsServer) {
	s.RegisterService(&_Metrics_serviceDesc, srv)
}

func _Metrics_GetMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricsServer).GetMetrics(m, &metricsGetMetricsServer{stream})
}

type Metrics_GetMetricsServer interface {
	Send(*MetricsResponse) error
	grpc.ServerStream
}

type metricsGetMetricsServer struct {
	grpc.ServerStream
}

func (x *metricsGetMetricsServer) Send(m *MetricsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Metrics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMetrics",
			Handler:       _Metrics_GetMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metrics.proto",
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x29,
	0xca, 0x4c, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9, 0x39,
	0x4a, 0x02, 0x5c, 0x7c, 0xbe, 0x10, 0xa9, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x6d,
	0x2e, 0x7e, 0xb8, 0x48, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x04, 0x17, 0x3b, 0x54, 0xbf,
	0x04, 0xa3, 0x02, 0xb3, 0x06, 0x4f, 0x10, 0x8c, 0x6b, 0x14, 0xc0, 0xc5, 0x0e, 0x55, 0x2c, 0xe4,
	0xca, 0xc5, 0xe5, 0x9e, 0x5a, 0x02, 0xe3, 0x49, 0xe8, 0xc1, 0xac, 0xd0, 0x43, 0x35, 0x5f, 0x4a,
	0x12, 0x8b, 0x0c, 0xc4, 0x1e, 0x25, 0x06, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xac, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0xcd, 0x67, 0x7f, 0xc8, 0xb2, 0x00, 0x00, 0x00,
}
